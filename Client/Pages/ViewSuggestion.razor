@page "/suggestion/{id:int}"
@using Nordic_Door.Shared.Models.API;
@using Nordic_Door.Shared.Models.Database;
@using Nordic_Door.Shared.Models.Common;
@using Nordic_Door.Client.Utils;

@inject HttpClient httpClient
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<!-- https://mudblazor.com/components/grid#basic-grid -->
<style>


    .container {
        height: 100%;
        width: 100%;
        display: flex;
        gap: 1rem;
    }

    .container-column {
        flex-direction: column;
    }

    .info-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem
    }

    .space-evenly {
        justify-content: space-evenly;
    }

    .info-container-vertical {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.5rem
    }

    .paper {
        display: flex;
        flex-direction: column;
        background-color: white;
        border: 2px solid #bdbdbd;
        min-width: 20%;
        border-radius: 25px;
        box-shadow: rgba(0, 0, 0, 0.10) 0px 5px 24px;
        gap: 1rem;
        padding: 1rem 1rem;
    }

    .paper-vertical {
        flex-direction: row !important;
        height: 10rem !important;
    }

    .paper .mud-typography {
        font-size: 1.3rem;
        font-weight: 400;
    }

    .title-container {
        display: flex;
        justify-content: space-between;
        margin-left: 1rem;
    }

        .title-container .title-heading {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding-bottom: 0.4rem;
        }

    .icon-container {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .actions {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .button-container {
        display: flex;
        gap: 1rem;
    }

    .comment-container {
        padding: 2rem;
        display: flex;
        flex-direction: column;
    }

    .history-container {
        flex: 1 1 0;
        min-height: 1rem;
        overflow: auto;
        padding: 1rem;
        border-top: solid grey 1px;
    }
</style>

<style type="text/css" media="screen and (max-width:635px)">

    .container {
        height: 100%;
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin-top: 1rem;
    }

    .paper {
        display: flex;
        flex-direction: column;
        background-color: white;
        border: 2px solid #bdbdbd;
        min-width: 50%;
        border-radius: 25px;
        box-shadow: rgba(0, 0, 0, 0.10) 0px 5px 24px;
        gap: 1rem;
        padding: 1rem 1rem;
    }

    .paper-vertical {
        flex-direction: column !important;
        height: 30rem !important;
    }


    .info-container-vertical {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.5rem;
    }

    .button-container {
        display: flex;
        gap: 1rem;
        flex-direction: column;
    }

    .history-container {
        flex: 1 1 0;
        min-height: 10rem;
        overflow: auto;
        padding: 1rem;
        border-top: solid grey 1px;
    }

</style>

<style type="text/css" media="screen and (max-width:896px)">

    .paper {
        display: flex;
        flex-direction: column;
        background-color: white;
        border: 2px solid #bdbdbd;
        min-width: 20%;
        border-radius: 25px;
        box-shadow: rgba(0, 0, 0, 0.10) 0px 5px 24px;
        gap: 1rem;
        padding: 1rem 1rem;
    }

    .button-container {
        display: flex;
        gap: 1rem;
        flex-direction: column;
    }

    .paper .mud-typography {
        font-size: 0.8rem;
        font-weight: 400;
    }
</style>

@if (loading || suggestion == null)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
}
else
{
    <MudForm @ref="form">
        <div class="container container-column">
            <div class="container">
            <div class="container container-column">
                <MudContainer class="d-flex flex-column gap-2">
                    @if (editEnabled)
                    {

                        <MudAlert Variant="Variant.Filled" Severity="Severity.Warning">Du er nå i redigeringsmodus. Trykk "Forkast" om du ikke vil lagre endringer</MudAlert>


                    }
                    <div class="paper paper-vertical">
                        <div class="info-container space-evenly">

                            <div class="info-container-vertical">
                                <div class="icon-container">
                                    <MudIcon Icon="@Icons.Filled.Info" />
                                    <MudText>Status</MudText>
                                </div>
                                @if (editEnabled)
                                {
                                    <MudSelect T="string" Label="Status" @bind-Value="@updatedSuggestion.Status">
                                        <MudSelectItem Value="@("Ny")" />
                                        <MudSelectItem Value="@("Åpen")" />
                                        <MudSelectItem Value="@("Lukket")" />
                                        <MudSelectItem Value="@("Avslått")" />

                                    </MudSelect>
                                }
                                else
                                {
                                    <MudChip Variant="Variant.Outlined" Color="Color.Info">@suggestion.Status</MudChip>

                                }
                            </div>
                            <div class="info-container-vertical">
                                <div class="icon-container">
                                    <MudIcon Icon="@Icons.Filled.AssignmentTurnedIn" />
                                    <MudText>Fase</MudText>
                                </div>
                                @if (editEnabled)
                                {
                                    <MudSelect T="string" Label="Status" @bind-Value="@updatedSuggestion.Phase">
                                        <MudSelectItem Value="@("Plan")" />
                                        <MudSelectItem Value="@("Do")" />
                                        <MudSelectItem Value="@("Study")" />
                                        <MudSelectItem Value="@("Act")" />

                                    </MudSelect>
                                }
                                else
                                {
                                    <MudChip Variant="Variant.Outlined" Color="Color.Info">@suggestion.Phase</MudChip>

                                }

                            </div>
                        </div>
                        <MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="my-6" />
                        <div class="info-container space-evenly">
                            <div class="info-container-vertical">
                                <div class="icon-container">
                                    <MudIcon Icon="@Icons.Filled.Person" />
                                    <MudText>Ansvarlig ansatt</MudText>
                                </div>
                                @if (editEnabled)
                                {
                                    <MudAutocomplete T="Employee" Label="Søk etter ansatt" @bind-Value="@updatedSuggestion.ResponsibleEmployee" ToStringFunc="@(e => e.Name)" SearchFunc="SearchEmployees" />
                                }
                                else
                                {
                                    @if (suggestion.ResponsibleEmployee == null)
                                    {
                                        <MudTextField T="string" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense" />

                                    }
                                    else
                                    {
                                        <MudTextField @bind-Value="@suggestion.ResponsibleEmployee.Name" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense" />

                                    }

                                }

                            </div>
                            <div class="info-container-vertical">
                                <div class="icon-container">
                                    <MudIcon Icon="@Icons.Filled.People" />
                                    <MudText>Ansvarlig team</MudText>
                                </div>
                                @if (editEnabled)
                                {
                                    <MudAutocomplete T="Team" Label="Søk etter team" @bind-Value="@updatedSuggestion.ResponsibleTeam" ToStringFunc="@(e => e.Name)" SearchFunc="SearchTeams" />
                                }
                                else
                                {
                                    @if (suggestion.ResponsibleTeam == null)
                                    {
                                        <MudTextField T="string" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense" />

                                    }
                                    else
                                    {

                                        <MudTextField @bind-Value="suggestion.ResponsibleTeam.Name" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                    }

                                }

                            </div>
                        </div>
                        <MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="my-6" />
                        <div class="info-container space-evenly">
                            <div class="info-container-vertical">
                                <div class="icon-container">
                                    <MudIcon Icon="@Icons.Filled.AccessTime" />
                                    <MudText>Sist oppdatert</MudText>
                                </div>

                                <MudTextField @bind-Value="@suggestion.LastUpdatedAt" T="DateTime?" ReadOnly="true" Format="yyyy-MM-dd HH:mm:ss" Variant="Variant.Outlined" Margin="Margin.Dense" />

                            </div>
                            <div class="info-container-vertical">
                                <div class="icon-container">
                                    <MudIcon Icon="@Icons.Filled.AssignmentLate" />
                                    <MudText>Frist</MudText>
                                </div>
                                @if (editEnabled)
                                {
                                    <MudDatePicker Label="Frist for sak" DateFormat="dd.MM.yyyy" @bind-Date="@updatedSuggestion.DeadLine" />
                                }
                                else
                                {
                                    <MudTextField @bind-Value="@suggestion.DeadLine" T="DateTime?" ReadOnly="true" Format="yyyy-MM-dd" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                }
                            </div>
                        </div>

                    </div>
                </MudContainer>
                <div class="paper">
                    <div class="title-container">
                        <div class="flex-column gap-2">

                            <div class="title-heading">

                                <MudIcon Icon="@Icons.Filled.Assignment" Style="display: inline;" />
                                @if (editEnabled)
                                {
                                    <MudTextField @bind-Value="@updatedSuggestion.Title" Variant="Variant.Outlined" Margin="Margin.Dense" />

                                }
                                else
                                {
                                    <MudText>@suggestion.Title</MudText>

                                }
                            </div>
                            <MudText Style="font-weight: 300; font-size: 15px">
                                Opprettet @(suggestion.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss"))
                            </MudText>
                        </div>

                        <div style="background-color: rgba(242,246,255,255); padding: 1rem; display: flex; flex-direction: column; border-radius: 25px;">
                            <MudText Style="font-weight: 400; font-size: 17px">
                                <MudIcon Icon="@Icons.Outlined.Person" Style="position: relative; top: 10%;" /> @suggestion.CreatedBy.Name
                            </MudText>
                            <MudText Style="font-weight: 400; font-size: 17px">
                                <MudIcon Icon="@Icons.Outlined.People" Style="position: relative; top:10%;" /> @suggestion.Team.Name
                            </MudText>
                        </div>

                    </div>

                    <div>
                    </div>
                    <MudTabs Elevation="2" Outlined="true">
                        <MudTabPanel Text="Informasjon" Icon="@Icons.Filled.Image">
                            @if (editEnabled)
                            {
                                <MudTextField T="string" @bind-Value="@updatedSuggestion.Description" Variant="Variant.Outlined" Text="@updatedSuggestion.Description" Lines="10" />

                            }
                            else
                            {
                                <MudTextField T="string" ReadOnly="true" Variant="Variant.Text" @bind-Text="suggestion.Description" Lines="10" />

                            }
                        </MudTabPanel>

                        <MudTabPanel Text="Bilder" Icon="@Icons.Filled.Image">
                            <div class="m-5">
                                <InputFile id="images" hidden OnChange="UploadFile" />
                                <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Filled.PhotoCamera"
                                       for="images">
                                    Last opp bilde
                                </MudButton>
                            </div>

                            <MudCarousel TData="object" Class="mud-width-full" Style="height: 20rem;" AutoCycle="false">
                                @foreach (var image in images)
                                {
                                    <MudCarouselItem>
                                        <div class="d-flex" style="height:100%">
                                            <MudImage Src="@image" />

                                        </div>
                                    </MudCarouselItem>
                                }

                            </MudCarousel>
                        </MudTabPanel>
                    </MudTabs>

                </div>
                <div class="paper ">
                    <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="@currentComment" Label="Skriv en kommentar.." Lines="2" />
                    <MudButton Style="align-self: end;" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Filled.Send" OnClick="OnCommentClick">Kommenter</MudButton>

                </div>
             
            </div>
            <div class="paper">
                <div class="actions">
                    <div class="icon-container">
                        <MudIcon Icon="@Icons.Filled.Settings" />
                        <MudText>Handlinger</MudText>
                    </div>
                    <div class="button-container">
                        @if (editEnabled)
                        {
                            <MudButton Color="Color.Primary" StartIcon="@Icons.Outlined.SaveAs" Variant="Variant.Filled" OnClick="OpenSaveDialog">Lagre endringer</MudButton>
                            <MudButton Color="Color.Secondary" StartIcon="@Icons.Filled.Cancel" Variant="Variant.Filled" OnClick="OpenCancelDialog">Forkast endringer</MudButton>

                        }
                        else
                        {
                            if(UserCanEdit()) {

                            <MudButton Color="Color.Primary" StartIcon="@Icons.Filled.Edit" Variant="Variant.Filled" OnClick="OnEditClick">Endre sak</MudButton>
                            if(UserCanClose()) {
                                <MudButton Color="Color.Secondary" StartIcon="@Icons.Filled.Cancel" Variant="Variant.Filled" OnClick="OpenCloseSuggestionDalog"> Lukk sak </MudButton>
                            }
                            }

                        }
                    </div>
                </div>

                <div class="icon-container">
                    <MudIcon Icon="@Icons.Filled.History" />
                    <MudText>Historikk</MudText>
                </div>

                <div class="history-container">
                    <MudTimeline>
                        @foreach (var _event in events)
                        {
                            <!-- Her sjekker vi om elementer vi er på er det første elementet (siste hendelse som har skjedd)
                                Om den er den siste, får den en annen farge
                            -->
                            <MudTimelineItem Color="@(events.FindIndex(x => _event == x) == 0 ? Color.Primary : Color.Default )">
                                <div class="d-flex flex-column ">

                                    <MudText Style="font-size: 1rem; font-weight: 600;">@_event.Description</MudText>
                                    <MudText Style="font-weight: 200; font-size: 14px;">
                                        @_event.Timestamp.ToString("yyyy-MM-dd H:m:s")
                                        <MudIcon Icon="@Icons.Outlined.Person" Style="position: relative; top: 10%;" /> @_event.Employee.Name
                                    </MudText>
                                </div>

                            </MudTimelineItem>
                        }
                    </MudTimeline>
                </div>
            </div>
            </div>
            <div class="container container-column" style="width: 80% !important">
                 <MudDivider />

                @foreach (var comment in comments)
                {
                    <MudPaper>
                        <div class="comment-container gap-1 ">
                            <div class="d-flex align-items-center gap-3 w-75" >
                                <MudIcon Icon="@Icons.Filled.PersonOutline" />
                                <MudText Style="font-weight: 600;">@comment.EmployeeName</MudText>
                                <MudText>@DateUtils.ToRelativeDateString(comment.Timestamp, true)</MudText>
                            </div>
                            @comment.Comment
                        </div>
                    </MudPaper>
                }
</div>
        </div>
    </MudForm>
}

@code {
    [Parameter]
    public int id { get; set; }
    [CascadingParameter]
    private UserRelation user { get; set; }
    private GetSuggestionRequest? suggestion;
    private GetSuggestionRequest? updatedSuggestion;
    private List<GetEventRequest>? events;
    private List<GetSuggestionCommentRequest> comments = new List<GetSuggestionCommentRequest>();
    private string currentComment;
    private bool editEnabled = false;
    private bool loading = true;
    private MudForm? form;
    IList<string> images = new List<string>(); // base64 for display

    // Denne blir kjørt når brukeren trykker "OK" i popup boks
    private async Task EnsureSaveDialogOk()

    {
        await UpdateSuggestion();
        editEnabled = false;
    }
    // Denne blir kjørt når brukeren trykker "Forkast" i popup boks
    protected async Task EnsureCancelDialogOk()
    {
        updatedSuggestion = new GetSuggestionRequest(suggestion);
        editEnabled = false;
    }

    // Denne funksjonen sjekker om brukeren har rettigheter til å lukke en sak
    // Om ikke, så vil ikke "Lukk sak" knappen vises
    protected bool UserCanClose() {

        // Hvis status er Lukket eller Avslått skal ikke knappen vises
        if(suggestion.Status.Equals("Lukket") || suggestion.Status.Equals("Avslått")) {
            return false;
        } 
        // Om brukeren som er innlogget er den som opprettet saken så skal Lukk sak knappen vises
        if(user.EmployeeId == suggestion.CreatedBy.Id) {
            return true;
        }
        // Om brukeren som innlogget er den som er satt ansvarlig for saken
        if(user.EmployeeId == suggestion?.ResponsibleEmployee?.Id) {
            return true;
        }
        if (user.userTeamRelations.Any(x => x.Team.Name == suggestion?.Team.Name))
        {
            return true;
        }
        // Om brukeren er teamleder og teamet brukeren er leder i er teamet som er ansvarlig for saken
        if(user.userTeamRelations.Any(x => x.UserRole.Equals("Teamleder") 
            && x.Team.Id == suggestion.Team.Id)) {
            return true;
        }
        // Om brukeren er admin
        if(user.EmployeeIsAdmin == 1) {
            return true;
        }

        return false;
    }

    protected bool UserCanEdit() {
        if (user.EmployeeId == suggestion.CreatedBy.Id)
        {
            return true;
        }
        if (user.EmployeeId == suggestion?.ResponsibleEmployee?.Id)
        {
            return true;
        }
        if(user.userTeamRelations.Any(x => x.Team.Name == suggestion?.ResponsibleTeam?.Name)) {
            return true;
        }
        if (user.userTeamRelations.Any(x => x.Team.Name == suggestion?.Team.Name)) {
            return true;
        }
        if(user.userTeamRelations.Any(x => x.UserRole.Equals("Teamleder") 
           && x.Team.Id == suggestion.Team.Id)) {
            return true;
        }
        // Om brukeren er admin
        if(user.EmployeeIsAdmin == 1) {
            return true;
        }
        return false;
    }

    // Denne blir kjørt når brukeren trykker "Kommenter"
    protected async void OnCommentClick()
    {
        // Først lager vi et kommentarobject med det brukeren skrev, datoen det ble skrevet og hvem som skrev
        var comment = new AddSuggestionCommentRequest()
            {
                EmployeeId = user.EmployeeId,
                SuggestionId = suggestion.Id,
                Comment = currentComment,
                Timestamp = DateTime.Now
            };

        // Her resetter vi kommentarfeltet til en tom tekststreng
        currentComment = "";
        // Her sender vi kommentaren til backend slik at den lagres i databasen gjennen en POST request
        // Inni < > så spesifiserer vi datatypen som vi skal sende til backend. Her sier vi at vi bare har lov til å sende AddSuggestionCommentRequest
        // Dette gjøres for å passe på at vi ikke kan sende feil datatyper til backend som kan skape crash eller andre feil
        var res = await httpClient.PostAsJsonAsync<AddSuggestionCommentRequest>("api/SuggestionComments", comment);

        // Her kjører vi GetComments metoden som henter alle kommentarer fra backend på nytt slik at den nye kommentaren vises 
        await GetComments();
    }
    // Denne funksjonen henter alle kommentarer fra backend
    protected async Task GetComments()
    {
        var res = await httpClient.GetFromJsonAsync<List<GetSuggestionCommentRequest>>("api/SuggestionComments/" + suggestion.Id);
        // res inneholder alle kommentarer fra backend. I linjen under så legger vi til alle kommentarer i en liste som brukes i HTML koden
        comments = new List<GetSuggestionCommentRequest>(res);
        // Denne funksjonen er innebygget i Blazor og kjører en slags "refresh" av siden slik siden viser alt som har blitt oppdatert
        StateHasChanged();
    }


    protected void OnEditClick()
    {
        // Skrur på eller av "Edit mode"
        editEnabled = !editEnabled;
    }

    // Denne funksjonen åpner popup boksen når du trykker "Lagre"
    protected void OpenSaveDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        // Denne linjen gjør slik at "EnsureSaveDialogOk" blir kjørt når du trykker på OK inne i dialogen
        var parameters = new DialogParameters { ["OnOk"] = EventCallback.Factory.Create(this, EnsureSaveDialogOk) };
        // Her gir vi inn custom tekst som vises i dialogen
        parameters.Add("Content", "Er du sikker på at du vil lagre endringene dine?");
        // Her åpner vi dialogen. Dialogen er en custom compponent som heter NordicDialog (Se under Shared mappen)
        DialogService.Show<NordicDialog>("Vil du lagre?", parameters, options);
    }

    protected void OpenCloseSuggestionDalog () {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { ["OnOk"] = EventCallback.Factory.Create(this, async (string comment) => await CloseSuggestion(comment)) };

        DialogService.Show<CommentDialog>("Gi en begrunnelse før saken lukkes", parameters, options);
    }
    protected void OpenCancelDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { ["OnOk"] = EventCallback.Factory.Create(this, EnsureCancelDialogOk) };
        parameters.Add("Content", "Er du sikker på at du vil forkaste endringene dine?");

        DialogService.Show<NordicDialog>("Vil du forkaste?", parameters, options);
    }

    // Denne blir kjørt når du trykker "Lukk sak"
    // comment parameteret er kommentaren man må skrive inn når du lukker saken 
    protected async Task CloseSuggestion(string comment) {

        // Her oppdaterer vi saken på backend med status som Lukker og fase som Act
        // Dette blir sendt som en POST requesyt til Update endepunktet i SuggestionController
        await httpClient.PutAsJsonAsync<UpdateSuggestionRequest>($"api/Suggestions/Update/{id}", new UpdateSuggestionRequest()
            {
                Title = suggestion.Title,
                ResponsibleTeam = suggestion.ResponsibleTeam?.Id,
                ResponsibleEmployee = suggestion.ResponsibleTeam?.Id,
                LastUpdatedAt = DateTime.Now,
                DeadLine = suggestion.DeadLine,
                Status = "Lukket",
                Phase = "Act",
                Description = suggestion.Description
            });
        // Her sender vi en ny event til backend om at saken har blitt lukket
        await httpClient.PostAsJsonAsync<AddEventRequest>($"api/Events/Add", new AddEventRequest()
            {
                EmployeeId = user.EmployeeId,
                SuggestionId = suggestion.Id,
                Description = "Saken har bitt lukket: " + comment,
                Timestamp = DateTime.Now,
            });
        // Her legger vi til en automatisk kommentar som sier at saken har blitt lukker
        var suggComment = new AddSuggestionCommentRequest()
            {
                EmployeeId = user.EmployeeId,
                SuggestionId = suggestion.Id,
                Comment = "SAK LUKKET: " + comment,
                Timestamp = DateTime.Now
            };
        await httpClient.PostAsJsonAsync<AddSuggestionCommentRequest>("api/SuggestionComments", suggComment);

        // Her oppdaterer vi suggestionet hos frontend 
        var (newSuggestion, newEvents) = await GetSuggestion();

        await GetComments();

        suggestion = newSuggestion;
        events = newEvents;
        // "Refresh" siden
        StateHasChanged();

    }
    // Denne funksjonen oppdaterer suggestion. Se kommentar under "CloseSuggestion" siden den gjør akkurat det samme
    protected async Task UpdateSuggestion()
    {

        await httpClient.PutAsJsonAsync<UpdateSuggestionRequest>($"api/Suggestions/Update/{id}", new UpdateSuggestionRequest()
            {
                Title = updatedSuggestion.Title,
                ResponsibleTeam = updatedSuggestion.ResponsibleTeam == null ? null : updatedSuggestion.ResponsibleTeam.Id,
                ResponsibleEmployee = updatedSuggestion.ResponsibleEmployee == null ? null : updatedSuggestion.ResponsibleEmployee.Id,
                LastUpdatedAt = DateTime.Now,
                DeadLine = updatedSuggestion.DeadLine,
                Status = updatedSuggestion.Status,
                Phase = updatedSuggestion.Phase,
                Description = updatedSuggestion.Description

            });

        await httpClient.PostAsJsonAsync<AddEventRequest>($"api/Events/Add", new AddEventRequest()
            {
                EmployeeId = user.EmployeeId,
                SuggestionId = suggestion.Id,
                Description = "Saken har blitt oppdatert",
                Timestamp = DateTime.Now,
            });
        var (newSuggestion, newEvents) = await GetSuggestion();

        if (newSuggestion == null)
        {
            Snackbar.Add("En feil oppsto under oppdatering. Kontakt din administrator", Severity.Error);
            editEnabled = false;
            return;
        }
        Snackbar.Add("Saken har blitt oppdatert", Severity.Success);

        suggestion = newSuggestion;
        events = newEvents;
        editEnabled = false;
        StateHasChanged();

    }

    // Denne funksjonen blir kjørt når siden lastes
    // Her henter vi data som skal vises fram med en gang
    protected override async Task OnInitializedAsync()
    {
        // Her henter vi saken som skal vises og alle events
        var (_suggestion, _events) = await GetSuggestion();

        if (_suggestion != null)
        {
            // Om suggestion ikke er null, setter vi verdier på alle variabler
            suggestion = _suggestion;
            // UpdatedSuggestion er objektet som blir oppdatert når du er i "Edit mode". suggestion variablet vil aldri bli endret og holder alltid de orginalie verdiene
            updatedSuggestion = new GetSuggestionRequest(_suggestion);
            events = _events;
            loading = false;
            // Hent alle kommentarer
            await GetComments();


        }
        // "Refresh" siden
        StateHasChanged();
    }


    // Denne søker alle ansatte (Blir brukt i MudAutocomplete)
    // name parameter er det brukeren skriver i søkefeltet
    protected async Task<IEnumerable<Employee>> SearchEmployees(string name)
    {
        // Hent alle brukere fra backend
        var employees = await httpClient.GetFromJsonAsync<List<Employee>>("api/Users");
        if (employees != null)
        {
            // Om brukerinputt er tomt returnerer vi alle ansattte
            if (string.IsNullOrEmpty(name))
            {
                return employees;
            }
            // Returner den ansatte hvor navnet til den ansatte inneholder noe av brukerinput (name)
            return employees.Where(emp => emp.Name.Contains(name));
        }
        // Hvis det oppstå en feil under henting av brukere, returner vi en tom array.
        return Array.Empty<Employee>();
    }
    // Denne søker alle teams. Den gjør akkurat det samme som SearchEmployees
    protected async Task<IEnumerable<Team>> SearchTeams(string name)
    {
        var teams = await httpClient.GetFromJsonAsync<List<Team>>("api/Teams");
        if (teams != null)
        {
            if (string.IsNullOrEmpty(name))
            {
                return teams;
            }
            return teams.Where(team => team.Name.Contains(name));
        }
        return Array.Empty<Team>();
    }
    // Henter suggestionet vi ser på
    protected async Task<(GetSuggestionRequest?, List<GetEventRequest>?)> GetSuggestion()
    {
        // Henter suggestion fra backend. id variabel kommer fra route, f.eks /suggestion/4 <-- her er id 4 så vi sier at backend skal hente saken hvor ID er 4
        var _suggestion = await httpClient.GetFromJsonAsync<GetSuggestionRequest>("api/Suggestions/" + id);
        // Hent alle events for saken
        var _events = await httpClient.GetFromJsonAsync<List<GetEventRequest>>("api/Events/" + id);
        if (_suggestion == null)
        {
            // Si ifra om en feil skjedde under hetning
            Snackbar.Add("Feil under henting av sak. Kontakt din administrator", Severity.Error);
            return (null, null);
        }
        // Legge til alle bilder slik at de vises
        foreach (var picture in _suggestion.Pictures)
        {
            // De må base64 enkodes for å vises
            images.Add($"data:image/png;base64,{Convert.ToBase64String(picture.Image)}");
        }
        // Sorter alle events slik at nyeste vises først
        var sortedEvents = (List<GetEventRequest>?) _events.OrderByDescending(x => x.Timestamp).ToList<GetEventRequest>();
        return (_suggestion, sortedEvents);

    }
    // Laster opp bilder til backend
    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        // Gjør om lastet opp fil til en Image fil med bredde/høyde 1000
        var image = await e.File.RequestImageFileAsync("image/png", 1000, 1000);
        // Lag et buffer hvor bildets binærversjon skal lagres til
        var buffer = new byte[image.Size];
        // Les binærtall inn i buffer
        await image.OpenReadStream().ReadAsync(buffer);
        // base64 encode bufferet slik at det kan vises som et HTML bilde
        images.Add($"data:image/png;base64,{Convert.ToBase64String(buffer)}");
        // Gjør om fil til byte[] så det kan sendet til backend
        var content = new StreamContent(e.File.OpenReadStream());
        var bytes = await content.ReadAsByteArrayAsync();
        // Send bildet til backend
        await httpClient.PostAsJsonAsync<AddPictureRequest>("api/Pictures/Add", new AddPictureRequest()
            {
                SuggestionId = suggestion.Id,
                EmployeeId = user.EmployeeId,
                UploadedAt = DateTime.Now,
                Image = bytes
            });

    }
}
