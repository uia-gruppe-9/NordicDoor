@page "/suggestion/{id:int}"
@using Nordic_Door.Shared.Models.API;
@using Nordic_Door.Shared.Models.Database;

@inject HttpClient httpClient
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<!-- https://mudblazor.com/components/grid#basic-grid -->
<style>


    .container {
        height: 90vh;
        width: 100%;
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .container-column {
        flex-direction: column;
    }

    .info-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem
    }

    .space-evenly {
        justify-content: space-evenly;
    }

    .info-container-vertical {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.5rem
    }

    .paper {
        display: flex;
        flex-direction: column;
        background-color: #fffcfc;
        border: 2px solid #bdbdbd;
        min-width: 20%;
        border-radius: 25px;
        box-shadow: rgba(0, 0, 0, 0.10) 0px 5px 24px;
        gap: 1rem;
        padding: 1rem 1rem;
    }

    .paper-vertical {
        flex-direction: row !important;
        height: 10rem !important;
    }

    .paper .mud-typography {
        font-size: 1.3rem;
        font-weight: 400;
    }

    .title-container {
        display: flex;
        justify-content: space-between;
        margin-left: 1rem;
    }

        .title-container .title-heading {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding-bottom: 0.4rem;
        }

    .icon-container {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .actions {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .button-container {
        display: flex;
        gap: 1rem;
    }

    .history-container {
        flex: 1 1 0;
        min-height: 0;
        overflow: auto;
        padding: 1rem;
        border-top: solid grey 1px;
    }
</style>
@if (loading || suggestion == null)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
}
else
{
    <MudForm @ref="form">
        <div class="container">

            <div class="container container-column">
                <MudContainer class="d-flex flex-column gap-2">
                    @if (editEnabled)
                    {

                        <MudAlert Variant="Variant.Filled" Severity="Severity.Warning">Du er nå i redigeringsmodus. Trykk "Forkast" om du ikke vil lagre endringer</MudAlert>


                    }
                    <div class="paper paper-vertical">
                        <div class="info-container space-evenly">

                            <div class="info-container-vertical">
                                <div class="icon-container">
                                    <MudIcon Icon="@Icons.Filled.Info" />
                                    <MudText>Status</MudText>
                                </div>
                                @if (editEnabled)
                                {
                                    <MudSelect T="string" Label="Status" @bind-Value="@updatedSuggestion.Status">
                                        <MudSelectItem Value="@("Ny")" />
                                        <MudSelectItem Value="@("Åpen")" />
                                        <MudSelectItem Value="@("Lukket")" />
                                        <MudSelectItem Value="@("Avslått")" />

                                    </MudSelect>
                                }
                                else
                                {
                                    <MudChip Variant="Variant.Outlined" Color="Color.Info">@suggestion.Status</MudChip>

                                }
                            </div>
                            <div class="info-container-vertical">
                                <div class="icon-container">
                                    <MudIcon Icon="@Icons.Filled.AssignmentTurnedIn" />
                                    <MudText>Fase</MudText>
                                </div>
                                @if (editEnabled)
                                {
                                    <MudSelect T="string" Label="Status" @bind-Value="@updatedSuggestion.Phase">
                                        <MudSelectItem Value="@("Plan")" />
                                        <MudSelectItem Value="@("Do")" />
                                        <MudSelectItem Value="@("Study")" />
                                        <MudSelectItem Value="@("Act")" />

                                    </MudSelect>
                                }
                                else
                                {
                                    <MudChip Variant="Variant.Outlined" Color="Color.Info">@suggestion.Phase</MudChip>

                                }

                            </div>
                        </div>
                        <MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="my-6" />
                        <div class="info-container space-evenly">
                            <div class="info-container-vertical">
                                <div class="icon-container">
                                    <MudIcon Icon="@Icons.Filled.Person" />
                                    <MudText>Ansvarlig ansatt</MudText>
                                </div>
                                @if (editEnabled)
                                {
                                    <MudAutocomplete T="Employee" Label="Søk etter ansatt" @bind-Value="@updatedSuggestion.ResponsibleEmployee" ToStringFunc="@(e => e.Name)" SearchFunc="SearchEmployees" />
                                }
                                else
                                {
                                    <MudTextField @bind-Value="suggestion.ResponsibleEmployee.Name" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense" />

                                }

                            </div>
                            <div class="info-container-vertical">
                                <div class="icon-container">
                                    <MudIcon Icon="@Icons.Filled.People" />
                                    <MudText>Ansvarlig team</MudText>
                                </div>
                                @if (editEnabled)
                                {
                                    <MudAutocomplete T="Team" Label="Søk etter team" @bind-Value="@updatedSuggestion.ResponsibleTeam" ToStringFunc="@(e => e.Name)" SearchFunc="SearchTeams" />
                                }
                                else
                                {
                                    <MudTextField @bind-Value="suggestion.ResponsibleTeam.Name" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense" />

                                }

                            </div>
                        </div>
                        <MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="my-6" />
                        <div class="info-container space-evenly">
                            <div class="info-container-vertical">
                                <div class="icon-container">
                                    <MudIcon Icon="@Icons.Filled.AccessTime" />
                                    <MudText>Sist oppdatert</MudText>
                                </div>

                                <MudTextField @bind-Value="@suggestion.LastUpdatedAt" T="DateTime?" ReadOnly="true" Format="yyyy-MM-dd HH:mm:ss" Variant="Variant.Outlined" Margin="Margin.Dense" />

                            </div>
                            <div class="info-container-vertical">
                                <div class="icon-container">
                                    <MudIcon Icon="@Icons.Filled.AssignmentLate" />
                                    <MudText>Frist</MudText>
                                </div>
                                @if (editEnabled)
                                {
                                    <MudDatePicker Label="Date Format" DateFormat="dd.MM.yyyy" @bind-Date="@updatedSuggestion.DeadLine" />
                                }
                                else
                                {
                                    <MudTextField @bind-Value="@suggestion.DeadLine" T="DateTime?" ReadOnly="true" Format="yyyy-MM-dd" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                }
                            </div>
                        </div>

                    </div>
                </MudContainer>
                <div class="paper">
                    <div class="title-container">
                        <div class="flex-column gap-2">

                            <div class="title-heading">

                                <MudIcon Icon="@Icons.Filled.Assignment" Style="display: inline;" />
                                @if (editEnabled)
                                {
                                    <MudTextField @bind-Value="@updatedSuggestion.Title" Variant="Variant.Outlined" Margin="Margin.Dense" />

                                }
                                else
                                {
                                    <MudText>@suggestion.Title</MudText>

                                }
                            </div>
                            <MudText Style="font-weight: 300; font-size: 15px">
                                Opprettet @suggestion.CreatedAt
                            </MudText>
                        </div>

                        <div style="background-color: rgba(242,246,255,255); padding: 1rem; display: flex; flex-direction: column; border-radius: 25px;">
                            <MudText Style="font-weight: 400; font-size: 17px">
                                <MudIcon Icon="@Icons.Outlined.Person" Style="position: relative; top: 10%;" /> @suggestion.CreatedBy.Name
                            </MudText>
                            <MudText Style="font-weight: 400; font-size: 17px">
                                <MudIcon Icon="@Icons.Outlined.People" Style="position: relative; top:10%;" /> @suggestion.Team.Name
                            </MudText>
                        </div>

                    </div>

                    <div>
                    </div>
                    <MudTabs Elevation="2" Outlined="true">
                        <MudTabPanel Text="Informasjon" Icon="@Icons.Filled.Image">
                            @if (editEnabled)
                            {
                                <MudTextField T="string" @bind-Value="@updatedSuggestion.Description" Variant="Variant.Outlined" Text="@updatedSuggestion.Description" Lines="10" />

                            }
                            else
                            {
                                <MudTextField T="string" ReadOnly="true" Variant="Variant.Text" @bind-Text="suggestion.Description" Lines="10" />

                            }
                        </MudTabPanel>

                        <MudTabPanel Text="Bilder" Icon="@Icons.Filled.Image">
                            <div class="m-5">
                            <InputFile id="images" hidden OnChange="UploadFile"/>
                            <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Filled.PhotoCamera"
                                   for="images">
                               Last opp bilde
                            </MudButton>
                            </div>

                            <MudCarousel TData="object" Class="mud-width-full" Style="height: 20rem;" AutoCycle="false">
                                @foreach (var image in images) {
                                    <MudCarouselItem>
                                        <div class="d-flex" style="height:100%">
                                        <MudImage Src="@image"/>

</div>
                                    </MudCarouselItem>
                                }
                               
                            </MudCarousel>
                        </MudTabPanel>
                    </MudTabs>

                </div>

            </div>
            <div class="paper">
                <div class="actions">
                    <div class="icon-container">
                        <MudIcon Icon="@Icons.Filled.Settings" />
                        <MudText>Handlinger</MudText>
                    </div>
                    <div class="button-container">
                        @if (editEnabled)
                        {
                            <MudButton Color="Color.Info" StartIcon="@Icons.Outlined.SaveAs" Variant="Variant.Filled" OnClick="OpenSaveDialog">Lagre endringer</MudButton>
                            <MudButton Color="Color.Error" StartIcon="@Icons.Filled.Cancel" Variant="Variant.Filled" OnClick="OpenCancelDialog">Forkast endringer</MudButton>

                        }
                        else
                        {
                            <MudButton Color="Color.Primary" StartIcon="@Icons.Filled.Edit" Variant="Variant.Filled" OnClick="OnEditClick">Endre sak</MudButton>

                        }
                    </div>
                </div>

                <div class="icon-container">
                    <MudIcon Icon="@Icons.Filled.History" />
                    <MudText>Historikk</MudText>
                </div>

                <div class="history-container">
                    <MudTimeline>
                        @foreach (var _event in events)
                        {
                            <MudTimelineItem>
                                <div class="d-flex flex-column ">

                                    <MudText Style="font-size: 1rem; font-weight: 600;">@_event.Description</MudText>
                                    <MudText Style="font-weight: 200; font-size: 14px;">
                                        @_event.Timestamp
                                        <MudIcon Icon="@Icons.Outlined.Person" Style="position: relative; top: 10%;" /> @suggestion.CreatedBy.Name
                                    </MudText>
                                </div>

                            </MudTimelineItem>
                        }
                    </MudTimeline>
                </div>
            </div>

        </div>
    </MudForm>
}

@code {
    [Parameter]
    public int id { get; set; }

    private GetSuggestionRequest? suggestion;
    private GetSuggestionRequest? updatedSuggestion;
    private List<GetEventRequest>? events;
    private bool editEnabled = false;
    private bool loading = true;
    private MudForm? form;
    IList<string> images = new List<string>(); // base64 


    private async Task EnsureSaveDialogOk()

    {
        await UpdateSuggestion();
        editEnabled = false;
    }

    protected async Task EnsureCancelDialogOk()
    {
        updatedSuggestion = new GetSuggestionRequest(suggestion);
        editEnabled = false;
    }

    protected void OnEditClick()
    {
        editEnabled = !editEnabled;
    }

    protected void OpenSaveDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { ["OnOk"] = EventCallback.Factory.Create(this, EnsureSaveDialogOk) };
        parameters.Add("Content", "Er du sikker på at du vil lagre endringene dine?");

        DialogService.Show<NordicDialog>("Vil du lagre?", parameters, options);
    }
    protected void OpenCancelDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { ["OnOk"] = EventCallback.Factory.Create(this, EnsureCancelDialogOk) };
        parameters.Add("Content", "Er du sikker på at du vil forkaste endringene dine?");

        DialogService.Show<NordicDialog>("Vil du forkaste?", parameters, options);
    }
    protected async Task UpdateSuggestion()
    {

        await httpClient.PutAsJsonAsync<UpdateSuggestionRequest>($"api/Suggestions/Update/{id}", new UpdateSuggestionRequest()
            {
                Title = updatedSuggestion.Title,
                ResponsibleTeam = updatedSuggestion.ResponsibleTeam == null ? null : updatedSuggestion.ResponsibleTeam.Id,
                ResponsibleEmployee = updatedSuggestion.ResponsibleEmployee == null ? null : updatedSuggestion.ResponsibleEmployee.Id,
                LastUpdatedAt = DateTime.Now,
                DeadLine = updatedSuggestion.DeadLine,
                Status = updatedSuggestion.Status,
                Phase = updatedSuggestion.Phase,
                Description = updatedSuggestion.Description

            });

        await httpClient.PostAsJsonAsync<AddEventRequest>($"api/Events/Add", new AddEventRequest()
            {
                EmployeeId = suggestion.CreatedBy.Id, // DENNE MÅ OPPDATERES ETTER AT AUTENTISERING HAR BLITT IMPLEMENTERT
                SuggestionId = suggestion.Id,
                Description = "Saken har blitt oppdatert",
                Timestamp = DateTime.Now,
            });
        var (newSuggestion, newEvents) = await GetSuggestion();

        if (newSuggestion == null)
        {
            Snackbar.Add("En feil oppsto under oppdatering. Kontakt din administrator", Severity.Error);
            editEnabled = false;
            return;
        }
        Snackbar.Add("Saken har blitt oppdatert", Severity.Success);

        suggestion = newSuggestion;
        events = newEvents;
        editEnabled = false;

    }
    protected override async Task OnInitializedAsync()
    {
        var (_suggestion, _events) = await GetSuggestion();

        if (_suggestion != null)
        {
            suggestion = _suggestion;
            updatedSuggestion = new GetSuggestionRequest(_suggestion);
            events = _events;
            loading = false;

        }
    }

    protected async Task<IEnumerable<Employee>> SearchEmployees(string name)
    {


        var employees = await httpClient.GetFromJsonAsync<List<Employee>>("api/Users");
        if (employees != null)
        {
            if (string.IsNullOrEmpty(name))
            {
                return employees;
            }
            return employees.Where(emp => emp.Name.Contains(name));
        }
        return Array.Empty<Employee>();
    }
    protected async Task<IEnumerable<Team>> SearchTeams(string name)
    {
        var teams = await httpClient.GetFromJsonAsync<List<Team>>("api/Teams");
        if (teams != null)
        {
            if (string.IsNullOrEmpty(name))
            {
                return teams;
            }
            return teams.Where(team => team.Name.Contains(name));
        }
        return Array.Empty<Team>();
    }

    protected async Task<(GetSuggestionRequest?, List<GetEventRequest>?)> GetSuggestion()
    {

        var _suggestion = await httpClient.GetFromJsonAsync<GetSuggestionRequest>("api/Suggestions/" + id);
        var _events = await httpClient.GetFromJsonAsync<List<GetEventRequest>>("api/Events/" + id);
        if (_suggestion == null)
        {
            Snackbar.Add("Feil under henting av sak. Kontakt din administrator", Severity.Error);
            return (null, null);
        }
        foreach(var picture in _suggestion.Pictures) {
            images.Add($"data:image/png;base64,{Convert.ToBase64String(picture.Image)}");
        }
        var sortedEvents = _events.OrderBy(x => x.Timestamp).ToList();
        return (_suggestion, sortedEvents);

    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var image = await e.File.RequestImageFileAsync("image/png", 1000, 1000);
        var buffer = new byte[image.Size];
        await image.OpenReadStream().ReadAsync(buffer);
        images.Add($"data:image/png;base64,{Convert.ToBase64String(buffer)}");
        var content = new StreamContent(e.File.OpenReadStream());
        var bytes = await content.ReadAsByteArrayAsync();

        await httpClient.PostAsJsonAsync<AddPictureRequest>("api/Picture/Add", new AddPictureRequest()
            {
                SuggestionId = suggestion.Id,
                EmployeeId = suggestion.CreatedBy.Id,
                UploadedAt = DateTime.Now,
                Image = bytes
            });
            
    }
    }
