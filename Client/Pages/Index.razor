@page "/"
@using Nordic_Door.Shared.Models.API;
@inject HttpClient httpClient
@inject NavigationManager Navigation


<style>

    .page-title {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1rem;

    }

    .CaseTable{
        display: flex;
        
        
       
      
    }
</style>
<PageTitle>Home</PageTitle>
<MudContainer Style="width: 100%">


    <div class="page-title">
        <MudText Typo="Typo.h2" Style="display: inline-block;">Saker</MudText>
        <MudButton OnClick="OnCreateNewClick" Size="Size.Medium" Color="Color.Primary" Variant="Variant.Filled">Opprett ny sak</MudButton>
    </div>

    
        <MudTable Items="@Suggestions"
                  Hover="true"
                  T="GetSuggestionRequest"
                  Breakpoint="Breakpoint.Sm"
                  LoadingProgressColor="Color.Info"
                  Loading="@loading"
                  OnRowClick="NavigateSelectedSuggestion"
                  Filter="new Func<GetSuggestionRequest, bool>(FilterFunc1)"
                      
                  >
                 

            <ToolBarContent>

                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>

            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<GetSuggestionRequest, object>(x=>x.Id)">ID</MudTableSortLabel></MudTh>
                <MudTh>Tittel</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<GetSuggestionRequest, object>(x=>x.CreatedBy.Name)">Opprettet av</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<GetSuggestionRequest, object>(x=>x.ResponsibleEmployee.Name)">Ansvarlig ansatt</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<GetSuggestionRequest, object>(x=>x.ResponsibleTeam.Name)">Ansvarlig team </MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<GetSuggestionRequest, object>(x=>x.Phase)">Fase</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<GetSuggestionRequest, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="Tittel">@context.Title</MudTd>
                <MudTd DataLabel="Opprettet av">@context.CreatedBy.Name</MudTd>
                <MudTd DataLabel="Ansvarlig ansatt">@context.ResponsibleEmployee?.Name</MudTd>
                <MudTd DataLabel="Ansvarlig Team">@context.ResponsibleTeam?.Name</MudTd>
                <MudTd DataLabel="Fase">@context.Phase</MudTd>
                <MudTd DataLabel="Status">@context.Status</MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>

        </MudTable>

        

    


</MudContainer>


@code {
    private List<GetSuggestionRequest> Suggestions = new List<GetSuggestionRequest>();

    private bool loading = true;
    protected override async Task OnInitializedAsync() {
        Suggestions = await httpClient.GetFromJsonAsync<List<GetSuggestionRequest>>("api/Suggestions");
        loading = false;

    }

    private void NavigateSelectedSuggestion(TableRowClickEventArgs<GetSuggestionRequest> clickEvent) {
        Navigation.NavigateTo("suggestion/" + clickEvent.Item.Id);
    }

    private void OnCreateNewClick() {
        Navigation.NavigateTo("new");

      
    }
    private string searchString1 = "";
  
    private bool FilterFunc1(GetSuggestionRequest suggestion ) => FilterFunc(suggestion, searchString1);

    private bool FilterFunc(GetSuggestionRequest Suggestions , string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (Suggestions.CreatedBy.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (Suggestions.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (Suggestions.Phase.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{Suggestions.Id}".Contains(searchString))
            return true;
        if (Suggestions.ResponsibleEmployee.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (Suggestions.ResponsibleTeam.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
   
}