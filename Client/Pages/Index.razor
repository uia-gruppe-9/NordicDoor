@page "/"
@using Nordic_Door.Shared.Models.API;
@using Nordic_Door.Shared.Models.Common;
@inject HttpClient httpClient
@inject NavigationManager Navigation


<style>

    .mud-table-toolbar {
        height: 100%;
    }
    .page-title {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1rem;
    }

    .container {
        display: flex;
        flex-direction: column;
        height: 100%;
    }
</style>
<PageTitle>Home</PageTitle>
<MudContainer Style="width: 100%">

    <div style="display: flex; gap: 2rem; align-items: center;">
        <div>
            <div class="page-title">
                <MudText Typo="Typo.h2" Style="display: inline-block;">Saker</MudText>
                <MudButton OnClick="OnCreateNewClick" Size="Size.Medium" Color="Color.Primary" Variant="Variant.Filled">Opprett ny sak</MudButton>
            </div>
            <MudTable Items="@FilteredSuggestions"
                      Hover="true"
                      T="GetSuggestionRequest"
                      Breakpoint="Breakpoint.Sm"
                      LoadingProgressColor="Color.Info"
                      Loading="@loading"
                      OnRowClick="NavigateSelectedSuggestion"
                      Filter="new Func<GetSuggestionRequest, bool>(FilterFunc1)">

                          <!-- Her vises alle filer knapper-->
                <ToolBarContent>

                    <div class="container p-3">
                        <MudText Style="font-weight: 600;">Quick filter</MudText>
                        <div>
                            <MudChipSet @bind-SelectedChip="selectedFilter" Filter="true">
                                <div class="container">
                                    <div class="d-flex align-baseline">
                                        <MudChip Text="all" OnClick="OnQuickFilterClick" Color="Color.Tertiary">Alle saker</MudChip>
                                        <MudChip Text="mine" Color="Color.Tertiary" OnClick="OnQuickFilterClick"> Mine saker</MudChip>
                                        <MudChip Text="myResponsible" OnClick="OnQuickFilterClick" Color="Color.Tertiary">Saker jeg er ansvarlig for</MudChip>

                                        @if (user.userTeamRelations.Count == 1)
                                        {
                                            <MudChip Text="myResponsible" OnClick="OnQuickFilterClick" Color="Color.Tertiary">Mitt team</MudChip>

                                        }
                                        else
                                        {
                                            <MudMenu FullWidth="true">
                                                <ActivatorContent>
                                                    <MudChip Icon="@Icons.Filled.KeyboardArrowDown" Color="Color.Tertiary">Mitt team</MudChip>
                                                </ActivatorContent>
                                                <ChildContent>
                                                    @foreach (var team in user.userTeamRelations)
                                                    {
                                                        <MudMenuItem OnClick="() => OnMemberTeamFilter(team.Team.Name)">@team.Team.Name</MudMenuItem>

                                                    }
                                                </ChildContent>
                                            </MudMenu>
                                        }

                                    </div>
                                    <div>
                                        <MudMenu FullWidth="true">
                                            <ActivatorContent>
                                                <MudChip Icon="@Icons.Filled.KeyboardArrowDown" Color="Color.Tertiary">Status</MudChip>
                                            </ActivatorContent>
                                            <ChildContent>
                                                @foreach (var status in Statuses)
                                                {
                                                    <MudMenuItem OnClick="() => OnStatusFilter(status)">@status</MudMenuItem>

                                                }
                                            </ChildContent>
                                        </MudMenu>
                                        <MudMenu FullWidth="true">
                                            <ActivatorContent>
                                                <MudChip Icon="@Icons.Filled.KeyboardArrowDown" Color="Color.Tertiary">Fase</MudChip>
                                            </ActivatorContent>
                                            <ChildContent>
                                                @foreach (var phase in Phases)
                                                {
                                                    <MudMenuItem OnClick="() => OnPhaseFilter(phase)">@phase</MudMenuItem>

                                                }
                                            </ChildContent>
                                        </MudMenu>
</div>
                                </div>



                            </MudChipSet>
                        </div>
                    </div>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

                </ToolBarContent>

                <HeaderContent>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<GetSuggestionRequest, object>(x=>x.Id)">ID</MudTableSortLabel></MudTh>
                    <MudTh>Tittel</MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GetSuggestionRequest, object>(x=>x.CreatedBy.Name)">Opprettet av</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GetSuggestionRequest, object>(x=>x.ResponsibleEmployee.Name)">Ansvarlig ansatt</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GetSuggestionRequest, object>(x=>x.ResponsibleTeam.Name)">Ansvarlig team </MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GetSuggestionRequest, object>(x=>x.Phase)">Fase</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GetSuggestionRequest, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>

                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.Id</MudTd>
                    <MudTd DataLabel="Tittel">@context.Title</MudTd>
                    <MudTd DataLabel="Opprettet av">@context.CreatedBy.Name</MudTd>
                    <MudTd DataLabel="Ansvarlig ansatt">@context.ResponsibleEmployee?.Name</MudTd>
                    <MudTd DataLabel="Ansvarlig Team">@context.ResponsibleTeam?.Name</MudTd>
                    <MudTd DataLabel="Fase">@context.Phase</MudTd>
                    <MudTd DataLabel="Status">@context.Status</MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager />
                </PagerContent>

            </MudTable>
        </div>
    </div>

</MudContainer>


@code {

    [CascadingParameter]
    private UserRelation user { get; set; }
    // Inneholder alle saker
    private List<GetSuggestionRequest> Suggestions = new List<GetSuggestionRequest>();
    // Denne inneholder alle saker som møter filterkrav
    private List<GetSuggestionRequest> FilteredSuggestions = new List<GetSuggestionRequest>();
    private List<string> Statuses = new List<string>();
    private List<string> Phases = new List<string>();

    // Filtered som er valgt
    private MudChip selectedFilter;
    private string filteredTeam;

    private bool loading = true;
    protected override async Task OnInitializedAsync()
    {
        // Henter all suggestions og statuser
        Suggestions = await httpClient.GetFromJsonAsync<List<GetSuggestionRequest>>("api/Suggestions");
        Statuses = await httpClient.GetFromJsonAsync<List<string>>("api/SuggestionStatus");
        Phases = await httpClient.GetFromJsonAsync<List<string>>("api/SuggestionPhase");
        FilteredSuggestions = new List<GetSuggestionRequest>(Suggestions);
        loading = false;

    }
    // FInner alle saker hvor teamnavnet er lik parameter

    private void OnMemberTeamFilter(string teamName)
    {
        if (selectedFilter.Text == "Mitt team")
        {
            FilteredSuggestions = new List<GetSuggestionRequest>(Suggestions);
            return;
        }
        FilteredSuggestions = Suggestions.FindAll(x => x.Team.Name == teamName);
        StateHasChanged();
    }
    // Finner alle saker hvor status er lik parameter
    private void OnStatusFilter(string status)
    {
        FilteredSuggestions = Suggestions.FindAll(x => x.Status == status);
        StateHasChanged();
    }
    // Finner alle saker hvor fase er lik parameter
    private void OnPhaseFilter(string phase)
    {
        FilteredSuggestions = Suggestions.FindAll(x => x.Phase == phase);
        StateHasChanged();
    }

    // Denne sjekker hvilket filter som har blitt valgt og filtrerer saker utifra valget
    private void OnQuickFilterClick()
    {
        if (selectedFilter != null)
        {

            switch (selectedFilter.Text) {
            
                case "mine":
                // Henter alle saker som brukeren som er innlogget har laget
                    FilteredSuggestions = Suggestions.FindAll(x => x.CreatedBy.Id == user.EmployeeId);
                    break;
                case "myResponsible":
                // Henter alle saker som brukeren som er innlogger er ansvarlig for
                    FilteredSuggestions = Suggestions.FindAll(x => x.ResponsibleEmployee?.Id == user.EmployeeId);
                    break;
                default:
                // Default er å vise alle saker
                    FilteredSuggestions = new List<GetSuggestionRequest>(Suggestions);
                    break;
            }
        }
        else
        {
            FilteredSuggestions = new List<GetSuggestionRequest>(Suggestions);

        }
        // Refresh side
        StateHasChanged();

    }
    // Denne blir kjør når du trykker på en sak i tabellen.
    // Vi kan få tak i ID'en til saken, dermed kan vi navigere til siden for å se på saken
    private void NavigateSelectedSuggestion(TableRowClickEventArgs<GetSuggestionRequest> clickEvent)
    {
        Navigation.NavigateTo("suggestion/" + clickEvent.Item.Id);
    }
    // Denne blir kjørt når du trykker på "Opprett sak"
    private void OnCreateNewClick()
    {
        // Naviger til /new
        Navigation.NavigateTo("new");


    }
    private string searchString1 = "";

    // Alle funksjoner under er for søk. Basically så gir du en søkestring og den sjekker alle kolonner i tabellen om det det du søkte finnes som en verdi i en celle
    private bool FilterFunc1(GetSuggestionRequest suggestion) => FilterFunc(suggestion, searchString1);

    private bool FilterFunc(GetSuggestionRequest Suggestions, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (Suggestions.CreatedBy.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (Suggestions.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (Suggestions.Phase.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{Suggestions.Id}".Contains(searchString))
            return true;
        if (Suggestions.ResponsibleEmployee.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (Suggestions.ResponsibleTeam.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}