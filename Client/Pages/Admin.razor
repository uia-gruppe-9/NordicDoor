@page "/admin"
@using Nordic_Door.Client.Models;
@using Nordic_Door.Shared.Models.API;
@using Nordic_Door.Shared.Models.Database;
@using Nordic_Door.Shared.Models.Common;

@inject ISnackbar Snackbar
@inject HttpClient httpClient;
@inject NavigationManager Navigation

<style>
	/*Styling for form1*/
	.create_Employee {
		width: 50%;
		float: left;
		padding: 20px;
	}

	/*Styling for form2*/
	.create_Team {
		width: 50%;
		float: right;
		padding: 20px;
	}

	/*Styling for form 3*/
	.change_TeamLeader {
		width: 50%;
		float: left;
		padding: 20px;
	}

	/*Styling form 4*/
	.change_Team {
		width: 50%;
		float: right;
		padding: 20px;
	}

	/*Styling for knappene*/
	input[type=submit] {
		padding:10px 15px;
		background: #848fa1;
		cursor:pointer;
		border-radius: 5px; 
		color: white;
		transition-duration: 0.4s;
	}

	/*Styling knappene*/
	input[type=submit]:hover {
			background-color:#af8a61;
		color: white;
	}

	/*Styling for tekstbokser*/
	input[type=text], [type=email], [type=password] {
		width: 100%;
		padding: 12px 20px;
		margin: 8px 0;
		box-sizing: border-box;
		border-radius: 5px;
	}

	/*Styling tekstbokser*/
	input[type=text]:focus {
		border: 3px solid #555;
	}

	input[type=email]:focus {
		border: 3px solid #555;
	}

	input[type=password]:focus {
		border: 3px solid #555;
	}

	/*Endre størrelse checkbox*/
	input[type=checkbox] {
		width: 17px;
		height: 17px;
		position:relative;
		
	}

	/*Endre størrelse radio*/
	input[type=radio] {
		width: 15px;
		height: 15px;

	}
</style>

@if(user.EmployeeIsAdmin == 1){

@if (loading) {
		<MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
	} else
	{


		<!--Form for opprettelse av employees-->
	<EditForm class="create_Employee" Model="@userModel" OnValidSubmit="@OnValidSubmit">
			<h2>Opprett ny bruker:</h2> <br />
			<label for="Name"><h3>Navn:</h3> </label><br />
		<InputText type= "text" id="Name" name="name" placeholder="Skriv fullt navn" @bind-Value="@userModel.Name" /><br />
		<label for="Email"><h3>Epost:</h3></label> <br />
		<InputText type="email" id="Email" name="email" placeholder="Skriv epost" @bind-Value="@userModel.Email" /><br />
			<label for="Password"><h3>Passord:</h3></label><br />
		<InputText type="password" id="Password" name="password" placeholder="Skriv passord" @bind-Value="@userModel.Password" /> <br />
			<br />
		<MudSelect T="string" Label="Velg opp til flere teams" MultiSelection="true" @bind-SelectedValues="@selectedTeams" >
				@foreach (var team in teams)
				{
					<MudSelectItem T="string"  Value="team.Name" />
				}
			</MudSelect>
			<br />
			<label for="Admin"><h3>Kryss av hvis denne brukeren skal være admin</h3></label>
		<InputCheckbox id="Admin" name="Admin" @bind-Value="@userModel.isAdmin" /> <br />
			<br />
			<input type="submit" value="Opprett bruker" />

		</EditForm>
		<p></p>
	} 

<!--Form for opprettelse av teams-->
<EditForm class="create_Team" Model="@teamModel" OnValidSubmit="@OnValidTeamSubmit">
	<h2>Opprett nytt team:</h2> <br />
	<label for="Team-name"><h3>Fyll inn ønsket team-navn: </h3></label><br />
	<InputText type="text" id="Team-name" name="Team-name" placeholder="Skriv team-navn" @bind-Value="@teamModel.TeamName" /><br />
	<br />
	<input type="submit" value="Opprett team" />
	 
</EditForm>
<br />


<!--Form for endring av teamleder-->
	<EditForm class="change_TeamLeader" Model="@changeTeamLeader" OnValidSubmit="@OnValidChangeTeamLeaderSubmit">
	<h2>Endre teamleder:</h2>
	<label for="Team-leder"></label>
	<MudAutocomplete T="Employee" Label="Søk etter ansatt" @bind-Value="@TeamLeader" ToStringFunc="@(e => e.Name)" SearchFunc="SearchEmployees" />
	<MudSelect T="string" Label="Velg nytt team" MultiSelection="true" @bind-SelectedValues="@alterTeamLeader">
		@foreach (var team in teams)
		{
			<MudSelectItem T="string" Value="team.Name" /> 
		}
	</MudSelect> <br />
	<input type="submit" value="Endre team-leder" />
</EditForm>

}
else{
	<MudText>Du har ikke tilgang til denne siden</MudText>
}
<!--Form for endring av teamtilhørighet-->
<EditForm class="change_Team" Model="@changeTeamModel" OnValidSubmit="@OnValidTeamSubmit">
	<h2>Endre teamtilhørighet:</h2>
	<label for="Team-tilhørighet"></label>
	<MudAutocomplete T="Employee" Label="Søk etter ansatt" ToStringFunc="@(e => e.Name)" SearchFunc="SearchEmployees" ValueChanged="@(async (Employee e) => await OnSelectEmployeeChange(e))" />
	<MudSelect T="string" Label="Velg nytt team" MultiSelection="true" @bind-SelectedValues="@alterEmployeeTeam">
		@foreach (var team in teams)
		{
			<MudSelectItem T="string" Value="team.Name" />
		}
	</MudSelect> <br />
	<input type="submit" value="Endre team" />
</EditForm>





@code {
	[CascadingParameter]
	private UserRelation user { get; set; }

	private CreateUserModel userModel = new CreateUserModel();
	private CreateTeamModel teamModel = new CreateTeamModel();
	private ChangeTeamModel changeTeamModel = new ChangeTeamModel();
	private ChangeTeamLeaderModel changeTeamLeader = new ChangeTeamLeaderModel();

	private Employee TeamLeader { get; set; }
	private Employee employee { get; set; }

	private List<Team> teams = new List<Team>();

	// Denne vil inneholde alle teams som den ansatte duvelger i endre teamtilhørlighet allerede er medlem av
	public List<string> currentMemberTeams { get; set; }

	private IEnumerable<string> options { get; set; } = new HashSet<string>();

	private IEnumerable<string> selectedTeams { get; set; } = new HashSet<string>();
	private IEnumerable<string> selectedTeamLeader { get; set; } = new HashSet<string>();
	private IEnumerable<string> alterTeamLeader { get; set; } = new HashSet<string>();
	private IEnumerable<string> alterEmployeeTeam { get; set; } = new HashSet<string>();


	public bool loading = true;

	protected async Task OnValidTeamSubmit() {
		var res = await httpClient.PostAsJsonAsync<AddTeamRequest>("api/Teams/Add", new AddTeamRequest()
		{
				TeamName = teamModel.TeamName, 

			});

		if(res.IsSuccessStatusCode) {
			Snackbar.Add("Team har blitt opprettet", Severity.Success);
			await FetchTeams();
			teamModel = new CreateTeamModel();
		} else {
			// hvis teamet allerede eksisterer sender backend en 409 kode
			if(res.StatusCode == System.Net.HttpStatusCode.Conflict) {
				Snackbar.Add($"Teamet {teamModel.TeamName} eksisterer allerede", Severity.Error);
			} else {
				Snackbar.Add($"Feil under opprettelse", Severity.Error);

			}
		}
		StateHasChanged();
	}

	protected async Task OnSelectEmployeeChange(Employee e) {
		Console.WriteLine(e.Id);

		var res = await httpClient.GetFromJsonAsync<List<GetUserTeamRequest>>("api/UserTeams/" + employee.Id);
		currentMemberTeams = res.Select(x => x.Team.Name).ToList();
		// Legger til teams som den asnatte er medlem av i valgte teasm
		alterEmployeeTeam.Concat(currentMemberTeams);
		StateHasChanged();
	}

	protected async Task OnValidChangeTeamLeaderSubmit() {

		var res = await httpClient.PutAsJsonAsync<UpdateTeamLeaderRequest>("api/Teams/UpdateTeamLeader", new UpdateTeamLeaderRequest()
			{
				EmployeeId = TeamLeader.Id,
				TeamNames = alterTeamLeader.ToList()
			});

		if (res.IsSuccessStatusCode)
		{
			Snackbar.Add("Teamleder har blitt endret", Severity.Success);
			changeTeamLeader = new ChangeTeamLeaderModel();
		}
		else
		{
		
		Snackbar.Add($"Feil under endring av teamleder", Severity.Error);

	
		}
		StateHasChanged();
	}

	protected async Task OnValidSubmit() {

		var res = await httpClient.PostAsJsonAsync<AddUserRequest>("api/Auth/CreateUser", new AddUserRequest()
			{
				Name = userModel.Name,
				Email = userModel.Email,
				IsAdmin = userModel.isAdmin,
				Password = userModel.Password,
				TeamNames = selectedTeams.ToList(),
			});

		if(res.IsSuccessStatusCode) {
			Snackbar.Add("Brukeren har blitt opprettet", Severity.Success);
			userModel = new CreateUserModel();

		} else {
			Snackbar.Add("Feil under brukeroppretting", Severity.Error);

		}
	}


	protected override async Task OnInitializedAsync()
	{
		await FetchTeams();
		loading = false;
	}

	protected async Task FetchTeams() {
		var _teams = await httpClient.GetFromJsonAsync<List<Team>>("api/Teams");

		teams = new List<Team>(_teams);
	}
	protected async Task<IEnumerable<Employee>> SearchEmployees(string name)
	{


		var employees = await httpClient.GetFromJsonAsync<List<Employee>>("api/Users");
		if (employees != null)
		{
			if (string.IsNullOrEmpty(name))
			{
				return employees;
			}
			return employees.Where(emp => emp.Name.Contains(name));
		}
		return Array.Empty<Employee>();
	}

}

