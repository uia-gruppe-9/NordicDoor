@page "/statistic"
@using Nordic_Door.Client.Models;
@using Nordic_Door.Shared.Models.API;
@using Nordic_Door.Shared.Models.Database;
@inject ISnackbar Snackbar
@inject HttpClient httpClient;


<style>
    /*Legg all styling her inne */

    .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 100%;
        gap: 1rem;
        height: 100%;
    }
     h3 {
         font-size: 100px;
         padding: 3rem;
     }
    .paper {
        width: 100%;
        text-align: center;
        padding: 1rem;
    }

    .row {
        width: 100%;
        gap: 1rem;
        height: 100%;
        display: flex;
    }

    select {
        height: 2rem;
        width: 16rem;
        border: solid 2px black;
    }
</style>
<!--
        Lag tilbakemeldingserror dersom teamet eller den ansatte ikke har en forbedringsforslag
    -->




<MudContainer>
    <div class="container">

        <h1>Statistikk</h1>


        <div class="row">

            <MudPaper Class="paper" Elevation="3">

                <h2>Ansatt Forbedringsforslags </h2>
                <EditForm Model="@employeeModel" OnValidSubmit="OnValidEmployeeSubmit">

                    <MudAutocomplete T="Employee" Label="Søk etter ansatt"
                    @bind-Value="@employeeModel.Employee" ToStringFunc="@(e => e.Name)" SearchFunc="SearchEmployees" />
                    <br/>

                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Hent statistikk</MudButton>

                </EditForm>
                <h3>@totalSuggestion</h3>
            </MudPaper>



            <MudPaper Class="paper" Elevation="3">
  
                    <h2>Eksempelstatistikk</h2>

                    <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="100%"></MudChart>
            </MudPaper>

        </div>
        <div class="row">

            <MudPaper Class="paper" Elevation="3">
                <h2>Eksempelstatistikk</h2>

                <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="100%"></MudChart>

            </MudPaper>



            <MudPaper Class="paper" Elevation="3">
                <h2>Eksempelstatistikk </h2>
                <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="100%"></MudChart>
            </MudPaper>

        </div>
    </div>

</MudContainer>
@code {

    private int totalSuggestion { get; set; }
    private GetEmployeeStatisticsModel employeeModel = new GetEmployeeStatisticsModel();

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series = new List<ChartSeries>()
        {   
            new ChartSeries() { Name = "United States", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
            new ChartSeries() { Name = "Germany", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
            new ChartSeries() { Name = "Sweden", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
        };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

    protected async Task OnValidEmployeeSubmit() {
       totalSuggestion = await httpClient.GetFromJsonAsync<int>("api/Statistic/byId/" + employeeModel.Employee.Id);
    }

    protected async Task<IEnumerable<Employee>> SearchEmployees(string name)
    {
        // Henter ut en liste av ansatte og lagrer den i denne funksjonen i employees variabelen.
        // Returnerer en ansatt dersom den blir funnet i listen, hvis ikke returner en tom liste.
        var employees = await httpClient.GetFromJsonAsync<List<Employee>>("api/Users");
        if (employees != null)
        {
            if (string.IsNullOrEmpty(name))
            {
                return employees;
            }
            return employees.Where(emp => emp.Name.Contains(name));
        }
        return Array.Empty<Employee>();
    }
}